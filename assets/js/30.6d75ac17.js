(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{356:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"装饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[t._v("#")]),t._v(" 装饰器模式")]),t._v(" "),a("p",[t._v("装饰器模式（Decorator Pattern）是一种"),a("strong",[t._v("结构性模式")]),t._v("，它用于在不改变对象现有结构（方法数和方法签名都不变）的前提下向其新增功能。")]),t._v(" "),a("h3",{attrs:{id:"典型应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#典型应用"}},[t._v("#")]),t._v(" 典型应用")]),t._v(" "),a("p",[t._v("Mybatis 中的 "),a("code",[t._v("org.apache.ibatis.executor.Executor")]),t._v(" 是一个典型的案例。")]),t._v(" "),a("p",[t._v("设想一下，如果我们是 Mybatis 的开发者，我们设计了 "),a("code",[t._v("org.apache.ibatis.executor.Executor")]),t._v(" 接口，并添加了不同的实现类，类图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/img/pages/design-pattern/decorator/class-diagram-1.png",alt:"avatar"}})]),t._v(" "),a("p",[t._v("此时，如果我们想要为这些 Executor 添加缓存功能，我们就可以使用装饰器模式，类图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/img/pages/design-pattern/decorator/class-diagram-2.png",alt:"avatar"}})]),t._v(" "),a("p",[t._v("新增一个装饰类 "),a("code",[t._v("CachingExecutor")]),t._v(":")]),t._v(" "),a("ol",[a("li",[t._v("实现 "),a("code",[t._v("org.apache.ibatis.executor.Executor")]),t._v(" 接口")]),t._v(" "),a("li",[t._v("持有一个被装饰的 "),a("code",[t._v("org.apache.ibatis.executor.Executor")]),t._v(" 对象，所有操作都会委托给该对象完成")])]),t._v(" "),a("p",[t._v("这样，我们有可能在其操作之前或者之后添加额外功能，如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CachingExecutor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executor")]),t._v(" delegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CachingExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executor")]),t._v(" delegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delegate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" delegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以 update 方法为例，在委托类执行操作之前先清空缓存")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MappedStatement")]),t._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" parameterObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SQLException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushCacheIfRequired")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parameterObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[t._v("#")]),t._v(" 思考")]),t._v(" "),a("p",[t._v("想要添加缓存功能，其实我们也可以直接修改 "),a("code",[t._v("BaseExecutor")]),t._v(", 但这样做缺点很明显：")]),t._v(" "),a("ol",[a("li",[t._v("如果 BaseExecutor 是在第三方依赖中，则无法直接修改 BaseExecutor")]),t._v(" "),a("li",[t._v("如果有多个 BaseExecutor，则每一个都需要改")])]),t._v(" "),a("p",[t._v("因此装饰器模式是一种较好实践。")])])}),[],!1,null,null,null);a.default=e.exports}}]);